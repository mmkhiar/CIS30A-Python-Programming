# ## Lab 10: Programming Exercise

# # 1. Pet Class
# # Write a class named Pet, which should have the following data attributes:
# # _name (for the name of the pet)
# # _animal_type (for the type of animal that a pet is. Example values are 'Dog', 'Cat', and 'Bird')
# # _age (for the pet's age)
# # The Pet class should have an __init__ method that creates these attributes
# # It should also have the following methods:
# # set_name
# # This method assigns a value to the _name field.
# # set_animal_type
# # This method assigns a value to the _animal_type field
# # set_age
# # This method assigns a value to the _age field
# # get_name
# # This method returns the value of the _name field.
# # get_animal_type
# # This method returns the value of the _animal_type field
# # get_age
# # This method returns the value of the _age field.
# # Once you have written the class, write a program that creates an object of the class and prompts the user
# # to enter the name, type, and age of his or her pet. This data should be stored as object's attributes. Use the object's accessor methods to
# # retrieve the pet's name, type, and age and display this data on the screen.

class Pet:
    def __init__(self, name, animal_type, age):
        self._name = name
        self._animal_type = animal_type
        self._age = age

    def set_name(self, name):
        self._name = name

    def set_animal_type(self, animal_type):
        self._animal_type = animal_type

    def set_age(self, age):
        self._age = age

    def get_name(self):
        return self._name

    def get_animal_type(self):
        return self._animal_type

    def get_age(self):
        return self._age


name = input("Enter the name of your pet: ")
animal_type = input("Enter the type of animal (e.g., Dog, Cat, Bird): ")
age = input("Enter the age of your pet: ")

pet = Pet(name, animal_type, age)

print("\nPet Details:")
print("Name:", pet.get_name())
print("Type of Animal:", pet.get_animal_type())
print("Age:", pet.get_age())

# #  2. Car Class
# #  Write a class named Car that has the following data attributes:
# #  •
# #  •
# #  •
# #  __year_model (for the car’s year model)
# #  __make (for the make of the car)
# #  __speed (for the car’s current speed)
# #  The Car class should have an __init__ method that accepts the car’s year model and
# #  make as arguments. These values should be assigned to the object’s __year_model
# #  and __make data attributes. It should also assign 0 to the __speed data attribute.
# #  The class should also have the following methods:
# #  •
# #  accelerate
# #  The accelerate method should add 5 to the speed data attribute each time it
# #  is called.
# #  •
# #  •
# #  brake 
# # The brake method should subtract 5 from the speed data attribute each time it
# #  is called.
# #  get_speed
# #  The get_speed method should return the current speed.
# #  Next, design a program that creates a Car object then calls the accelerate method five
# #  times. After each call to the accelerate method, get the current speed of the car and
# #  display it. Then call the brake method five times. After each call to the brake
# #  method get the current speed of the car and display it

class Car:
    def __init__(self, year_model, make):
        self.__year_model = year_model
        self.__make = make
        self.__speed = 0

    def accelerate(self):
        self.__speed += 5

    def brake(self):
        if self.__speed >= 5:
            self.__speed -= 5
        else:
            self.__speed = 0

    def get_speed(self):
        return self.__speed


def main():
    car = Car(2023, "Toyota")

    print("Accelerating:")
    for _ in range(5):
        car.accelerate()
        print("Current speed:", car.get_speed())

    print("\nBraking:")
    for _ in range(5):
        car.brake()
        print("Current speed:", car.get_speed())

if __name__ == "__main__":
    main()

# # 3. Personal Information Class
# # Design a class that holds the following personal data: name, address, age, and phone number.
# # Write appropriate accessor and mutator methods. Also, write a program that creates three instances of the class.
# # Each instance should hold fictional information for a fake person. (For privacy purpose, do not store real personal information
# # in your program.)

class PersonalInformation:
    def __init__(self, name, address, age, phone_number):
        self.__name = name
        self.__address = address
        self.__age = age
        self.__phone_number = phone_number

    def get_name(self):
        return self.__name

    def get_address(self):
        return self.__address

    def get_age(self):
        return self.__age

    def get_phone_number(self):
        return self.__phone_number

    def set_name(self, name):
        self.__name = name

    def set_address(self, address):
        self.__address = address

    def set_age(self, age):
        self.__age = age

    def set_phone_number(self, phone_number):
        self.__phone_number = phone_number


def main():
    person1 = PersonalInformation("Johnson Blues", "123 Joker Street", 20, "555-1234")
    person2 = PersonalInformation("Smith Warhog", "456 April Avenue", 50, "555-5678")
    person3 = PersonalInformation("Maggy Runs", "789 Jones Road", 45, "555-8765")

    for person in (person1, person2, person3):
        print(f"Name: {person.get_name()}")
        print(f"Address: {person.get_address()}")
        print(f"Age: {person.get_age()}")
        print(f"Phone Number: {person.get_phone_number()}")
        print("-" * 40)

if __name__ == "__main__":
    main()


# # 4. Employee Class
# #  Write a class named Employee that holds the following data about an employee in
# #  attributes: name, ID number, department, and job title.
# #  The program should store this data in the three objects, then display the data for each
# #  employee on the screen.

class Employee:
    def __init__(self, name, id_number, department, job_title):
        self.__name = name
        self.__id_number = id_number
        self.__department = department
        self.__job_title = job_title

    def get_name(self):
        return self.__name

    def get_id_number(self):
        return self.__id_number

    def get_department(self):
        return self.__department

    def get_job_title(self):
        return self.__job_title

    def set_name(self, name):
        self.__name = name

    def set_id_number(self, id_number):
        self.__id_number = id_number

    def set_department(self, department):
        self.__department = department

    def set_job_title(self, job_title):
        self.__job_title = job_title


def main():
    employee1 = Employee("Susan Meyers", 47899, "Accounting", "Vice President")
    employee2 = Employee("Mark Jones", 39119, "IT", "Programmer")
    employee3 = Employee("Joy Rogers", 81774, "Manufacturing", "Engineer")

    for employee in (employee1, employee2, employee3):
        print(f"Name: {employee.get_name()}")
        print(f"ID Number: {employee.get_id_number()}")
        print(f"Department: {employee.get_department()}")
        print(f"Job Title: {employee.get_job_title()}")
        print("-" * 20)

if __name__ == "__main__":
    main()


# # 5. Retail Item Class
# #  Write a class named RetailItem that holds data about an item in a retail store. The
# #  class should store the following data in attributes: item description, units in inventory,
# #  and price.

class RetailItem:
    def __init__(self, description, units, price):
        self.__description = description
        self.__units = units
        self.__price = price

    def get_description(self):
        return self.__description

    def get_units(self):
        return self.__units

    def get_price(self):
        return self.__price

    def set_description(self, description):
        self.__description = description

    def set_units(self, units):
        self.__units = units

    def set_price(self, price):
        self.__price = price

def main():
    item1 = RetailItem("Jacket", 12, 59.95)
    item2 = RetailItem("Designer Jeans", 40, 34.95)
    item3 = RetailItem("Shirt", 20, 24.95)

    for item in (item1, item2, item3):
        print(f"Description: {item.get_description()}")
        print(f"Units in Inventory: {item.get_units()}")
        print(f"Price: ${item.get_price():.2f}")
        print("-" * 20)

if __name__ == "__main__":
    main()

# 6. Patient Charges
# Write a class named Patient that has attributes for the following data:
# First name, middle name, and last name
# Address, city, state, and ZIP code
# Phone number
# Name and phone number of emergency contact
# The Patient class’s __init__ method should accept an argument for each attribute.
# The Patient class should also have accessor and mutator methods for each attribute.
# Next, write a class named Procedure that represents a medical procedure that has
# been performed on a patient. The Procedure class should have attributes for the
# following data:
# Name of the procedure
# Date of the procedure
# Name of the practitioner who performed the procedure
# Charges for the procedure
# The Procedure class’s __init__ method should accept an argument for each
# attribute. The Procedure class should also have accessor and mutator methods for
# each attribute.

#  Next, write a program that creates an instance of the Patient class, initialized with
#  sample data. Then, create three instances of the Procedure class, initialized with the
#  following data:
#  Procedure #1:
#  Procedure name: Physical Exam
#  Date: Today’s date
#  Practitioner: Dr. Irvine
#  Charge: 250.00
#  Procedure #2:
#  Procedure name: X-ray
#  Date: Today’s date
#  Practitioner: Dr. Jamison
#  Charge: 500.00
#  Procedure #3:
#  Procedure name: Blood test
#  Date: Today’s date
#  Practitioner: Dr. Smith
#  Charge: 200.00
#  The program should display the patient’s information, information about all three of the
#  procedures, and the total charges of the three procedures.

from datetime import date

class Patient:
    def __init__(self, first_name, middle_name, last_name, address, city, state, zip_code, phone, emergency_contact_name, emergency_contact_phone):
        self.__first_name = first_name
        self.__middle_name = middle_name
        self.__last_name = last_name
        self.__address = address
        self.__city = city
        self.__state = state
        self.__zip_code = zip_code
        self.__phone = phone
        self.__emergency_contact_name = emergency_contact_name
        self.__emergency_contact_phone = emergency_contact_phone

    def get_first_name(self):
        return self.__first_name

    def get_middle_name(self):
        return self.__middle_name

    def get_last_name(self):
        return self.__last_name

    def get_address(self):
        return self.__address

    def get_city(self):
        return self.__city

    def get_state(self):
        return self.__state

    def get_zip_code(self):
        return self.__zip_code

    def get_phone(self):
        return self.__phone

    def get_emergency_contact_name(self):
        return self.__emergency_contact_name

    def get_emergency_contact_phone(self):
        return self.__emergency_contact_phone

    def set_first_name(self, first_name):
        self.__first_name = first_name

    def set_middle_name(self, middle_name):
        self.__middle_name = middle_name

    def set_last_name(self, last_name):
        self.__last_name = last_name

    def set_address(self, address):
        self.__address = address

    def set_city(self, city):
        self.__city = city

    def set_state(self, state):
        self.__state = state

    def set_zip_code(self, zip_code):
        self.__zip_code = zip_code

    def set_phone(self, phone):
        self.__phone = phone

    def set_emergency_contact_name(self, emergency_contact_name):
        self.__emergency_contact_name = emergency_contact_name

    def set_emergency_contact_phone(self, emergency_contact_phone):
        self.__emergency_contact_phone = emergency_contact_phone


class Procedure:
    def __init__(self, procedure_name, procedure_date, practitioner_name, charges):
        self.__procedure_name = procedure_name
        self.__procedure_date = procedure_date
        self.__practitioner_name = practitioner_name
        self.__charges = charges

    def get_procedure_name(self):
        return self.__procedure_name

    def get_procedure_date(self):
        return self.__procedure_date

    def get_practitioner_name(self):
        return self.__practitioner_name

    def get_charges(self):
        return self.__charges

    def set_procedure_name(self, procedure_name):
        self.__procedure_name = procedure_name

    def set_procedure_date(self, procedure_date):
        self.__procedure_date = procedure_date

    def set_practitioner_name(self, practitioner_name):
        self.__practitioner_name = practitioner_name

    def set_charges(self, charges):
        self.__charges = charges

def main():
    patient = Patient(
        "John", "A.", "Doe", "123 Main St", "Springfield", "IL", "62701",
        "555-1234", "Jane Doe", "555-5678"
    )

    today_date = date.today().strftime("%m/%d/%Y")

    procedure1 = Procedure("Physical Exam", today_date, "Dr. Irvine", 250.00)
    procedure2 = Procedure("X-ray", today_date, "Dr. Jamison", 500.00)
    procedure3 = Procedure("Blood test", today_date, "Dr. Smith", 200.00)

    print("Patient Information")
    print("-" * 20)
    print(f"Name: {patient.get_first_name()} {patient.get_middle_name()} {patient.get_last_name()}")
    print(f"Address: {patient.get_address()}, {patient.get_city()}, {patient.get_state()} {patient.get_zip_code()}")
    print(f"Phone: {patient.get_phone()}")
    print(f"Emergency Contact: {patient.get_emergency_contact_name()}")
    print(f"Emergency Contact Phone: {patient.get_emergency_contact_phone()}")
    print("\nProcedures")
    print("-" * 20)

    procedures = [procedure1, procedure2, procedure3]
    total_charges = 0

    for procedure in procedures:
        print(f"Procedure Name: {procedure.get_procedure_name()}")
        print(f"Date: {procedure.get_procedure_date()}")
        print(f"Practitioner: {procedure.get_practitioner_name()}")
        print(f"Charge: ${procedure.get_charges():.2f}")
        print("-" * 20)
        total_charges += procedure.get_charges()

    print(f"Total Charges: ${total_charges:.2f}")

if __name__ == "__main__":
    main()
