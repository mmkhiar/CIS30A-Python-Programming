# 1. Initials

# Write a program that gets a string containing a person's first, middle, and last names, and displays their first, middle, and last initials,
# For example, if the user enters John William Smith, the program should display J.W.S

First_name=input("What is your first name?\n")
Middle_name=input("What is your middle name?\n")
Last_name=input("What is your last name?\n")

if Middle_name != "":
    print(First_name[0]+"."+Middle_name[0]+"."+Last_name[0]+".\n")
else:
    print(First_name[0]+"."+Last_name[0]+".\n")

# 2. Sum of Digits in a String
# Write a program that asks the user to enter a series of single-digit numbers with nothing seperating them.
# The program should display the sume of all the single digits numbers in a the string.
# For example, if the user ennters 2514, the method should return 12, which is the sum of 2, 5, 1, and 4

number_string=input("Please enter a string of numbers: \n")
number_string_list=[]

for i in number_string:
    number_string_list.append(int(i))

print(sum(number_string_list))

# 3. Data Printer
# Write a program that reads a string from the user containing a data in the form mm/dd/yyyy.
# It should print in the format March 12, 2018.

data_format_1=input("Please enter a date in a mm/dd/yyyy format: ")
months=['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
mm=int(data_format_1[0:2])
dd=data_format_1[3:5]
yyyy=data_format_1[6:10]
new_month_name=months[mm-1]
print(f"\nThe date [{data_format_1}] in this format is [{new_month_name} {dd}, {yyyy}] in this format\n")

## 4. Morce Code Converter
# Morse code is a code where each letter of the English Alphabet, each digit, and various punctuation characters are represented by a series of dots and dashes. 
# Write a program that asks the user to enter a string, then converts that string to Morse Code

morse_code_dict = {
    ' ': '/', ',': '--..--', '.': '.-.-.-','?': '..--..','0': '-----', '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....',
    '6': '-....', '7': '--...', '8': '---..', '9': '----.','A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.',
    'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.',
    'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-',
    'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..'
}

User_in=input("Please type something in English: ")

def morse_code_func(input_string):
    morse_code=[]
    for char in input_string.upper():
            if char in morse_code_dict:
                morse_code.append(morse_code_dict[char])
            else:
                morse_code.append("?")
    return ' '.join(morse_code)

result=morse_code_func(User_in)
print("The translation in Morse Code", result)

# 5. Alphabetic Telephone Number Translator
# Many companies use telephones numbers like 555-GET-FOOD so the number is easier for their customers to remember. 
# On a standard telephone, the alphabetic letters are mapped to numbers in the following fashion:

# Write a program that asks the user to enter a 10-character telephone number in the format XXX-XXX-XXXX.
# The application should display the telephone number with any alphabetic characters that appeared in the original translated to their numberic equivalent.
# For example, if the user enters 555-GET-FOOD, the application should display 555-438-3663

letter_to_number = {
    'A': '2', 'B': '2', 'C': '2',
    'D': '3', 'E': '3', 'F': '3',
    'G': '4', 'H': '4', 'I': '4',
    'J': '5', 'K': '5', 'L': '5',
    'M': '6', 'N': '6', 'O': '6',
    'P': '7', 'Q': '7', 'R': '7', 'S': '7',
    'T': '8', 'U': '8', 'V': '8',
    'W': '9', 'X': '9', 'Y': '9', 'Z': '9'
}
user_input = input("Enter a 10-character telephone number (e.g., XXX-XXX-XXXX): ")

def translate_phone_number(phone_number):
    translated_number = []
    for char in phone_number:
        if char.isalpha(): 
            translated_number.append(letter_to_number[char.upper()])
        else:
            translated_number.append(char)
    return ''.join(translated_number)

translated_phone = translate_phone_number(user_input)
print("Translated Telephone Number:", translated_phone)

# 6. Average Number of Words
# If you have downloaded the source code from the cs portal, you will find a file named text.txt in the chapter 8 folder.
# The text that is in the file is stored as one sentence per line.
# Write a program that reads the file's contents and calculates the average number of words per sentence.
# (You can access the computer science portal at www.pearsonhighered.com/gaddis)

def average_words_per_sentence(filename):
    try:
        with open(filename, 'r') as file:
            sentences = file.readlines()

        total_words = sum(len(sentence.split()) for sentence in sentences)
        num_sentences = len(sentences)

        if num_sentences > 0:
            average_words = total_words / num_sentences
        else:
            average_words = 0

        return average_words
    except FileNotFoundError:
        print(f"The file '{filename}' was not found.")
        return None

filename = 'D:/MMK/College/Classes/Fall 24/CIS-30A Python Programming/Source Code/Gaddis_Python6e_Source_Code/Chapter 08/text.txt'

average = average_words_per_sentence(filename)
if average is not None:
    print(f"Average number of words per sentence: {average:.2f}")


# 7. Character Analysis
# Read text.txt from file. Write a program that reads the file's contents and determines the following
# The number of uppercase letters
# The number of lowercase letters
# The number of digits
# The number of whitespace characters

with open('D:/MMK/College/Classes/Fall 24/CIS-30A Python Programming/Source Code/Gaddis_Python6e_Source_Code/Chapter 08/text.txt','r') as text_doc:
    contents=text_doc.read()

upper_count=0
lower_count=0
digit_count=0
whtspc_count=0

for char in contents:
    if char.isupper():
        upper_count+=1
    elif char.islower():
        lower_count+=1
    elif char.isdigit():
        digit_count+=1
    elif char.isspace():
        whtspc_count+=1

print("\nUppercase letters:", upper_count)
print("Lowercase letters:", lower_count)
print("Digits:", digit_count)
print("Whitespace characters:", whtspc_count,"\n")

# 8. Sentence Capitalizer
# Write a program with a function that accepts a string as an argument and returns a copy of the string with the first character of each sentence capitalized
# For instance, if the argument is 'hello. my name is Joe. what is your name?'
# The function should return the string 'Hello. My name is Joe. What is your name?'
# The program should let the user enter a string and then pass it to the function.
# The modified string should be displayed.

def capitalize_sentences(input_string):
    sentences = input_string.replace('!', '.').replace('?', '.').split('. ')
    capitalized_sentences = [sentence.capitalize() for sentence in sentences]
    result = '. '.join(capitalized_sentences)

    if result:
        result += '.'

    return result

user_input = input("Enter a string: ")

modified_string = capitalize_sentences(user_input)
print("Modified string:", modified_string)

# 9. Vowels and Consonants
# Write a program with a function that accepts a string as an argument and returns the number of vowels that the string contains.
# The application should have another function that accepts a string as an argument and returns the number of consonants that the string contains.
# The application should let the user enter a string, and should display the number of vowels and the number of consonants it contains.

vowels="aeiouAEIOU"

def vowel_check(input):
    return sum(1 for char in input if char in vowels)

def consonant_check(input):
    return sum(1 for char in input if char not in vowels)

user_input=input("Please enter your string: ")

vowel_count=vowel_check(user_input)
consonant_count=consonant_check(user_input)

print(f"Number of vowels: {vowel_count}")
print(f"Number of consonants: {consonant_count}")

# 10. Most Frequent Character
# Write a program that lets the user enter a string and displays the character that appears most frequently in the string.

def most_freq_character(input_string):
    frequency_dict = {}
    
    for char in input_string:
        if char in frequency_dict:
            frequency_dict[char] += 1
        else:
            frequency_dict[char] = 1

    most_frequent = max(frequency_dict, key=frequency_dict.get)
    return most_frequent, frequency_dict[most_frequent]

user_input = input("Enter a string: ")

character, frequency = most_freq_character(user_input)
print(f"The most frequent character is '{character}' and appears {frequency} times.")
